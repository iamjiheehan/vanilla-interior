"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _layout2 = _interopRequireDefault(require("./layout.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var _default = /*#__PURE__*/function (_layout) {
  _inherits(_default, _layout);
  var _super = _createSuper(_default);
  function _default(params) {
    var _this;
    _classCallCheck(this, _default);
    _this = _super.call(this, params);
    _this.setTitle("Board");
    return _this;
  }
  _createClass(_default, [{
    key: "getHTML",
    value: function () {
      var _getHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", "\n            <div class=\"board\">   \n                <div id=\"myProgress\">\n                    <div id=\"myBar\" style = \"width : 66.66%\"></div>\n                </div>\n                <div class=\"board__content\">   \n                    <div class=\"board__calculator-unit\">\n                        <h1> \uD3C9 \uC744 \uC81C\uACF1\uBBF8\uD130\uB85C \uBC14\uAFB8\uAE30 </h1>\n                        <label for=\"length-pyeong\">\uD3C9 \uC218 \uC785\uB825\uD558\uAE30 : </label>\n                        <input type=\"number\" id=\"autoInput\" placeholder = \"\uC608 ) 25\uD3C9\uC774\uBA74 25 \uC785\uB825\"><br>\n                        \n                        <div class = \"board__calculator-unit-result\"></div>\n                        \n                        <span>\uC18C\uC22B\uC810 3 \uC790\uB9AC\uC5D0\uC11C \uBC18\uC62C\uB9BC\uD55C \uACB0\uACFC\uC785\uB2C8\uB2E4.</span>\n                    </div>\n                    <div class=\"board__calculator-price\">\n                        \n                        <h1> \uACF5\uAC04\uC758 \uADDC\uBAA8\uB97C \uC54C\uB824\uC8FC\uC138\uC694 </h1>\n                        \n                        <div class = \"board__calculator-flex\">\n                            <div class = \"board__calculator-left\">\n                                <label for=\"length\">\uACF5\uAC04\uC758 \uAC00\uB85C \uAE38\uC774 \uC785\uB825\uD558\uAE30 : </label>\n                                <input type=\"number\" id=\"width\" name=\"length\" placeholder = \"\uC81C\uACF1\uBBF8\uD130\uB85C \uC785\uB825\uD558\uAE30\"><br>\n                            \n                                <label for=\"width\">\uACF5\uAC04\uC758 \uC138\uB85C \uAE38\uC774 \uC785\uB825\uD558\uAE30 : </label>\n                                <input type=\"number\" id=\"length\" name=\"width\" placeholder = \"\uC608 ) 25\u33A1\uC774\uBA74 25 \uC785\uB825\"><br>\n                            </div>\n                            <div class = \"board__calculator-line\"></div>\n\n                            <div class = \"board__calculator-right\">\n                                <label for=\"scale\">\uACF5\uAC04\uC758 \uC804\uCCB4 \uBA74\uC801 \uC785\uB825\uD558\uAE30 : </label>\n                                <input type=\"number\" id=\"scale\" name=\"scale\" placeholder = \"\uC22B\uC790\uB9CC \uC785\uB825\uD574\uC8FC\uC138\uC694\"><br>\n                            </div>\n                        </div>\n                        <div class=\"board__amountOfimgs\">\n                            <label for=\"amount\">\uD544\uC694\uD55C \uC774\uBBF8\uC9C0 \uC218\uB7C9 \uC785\uB825\uD558\uAE30 :</label>\n                            <input type=\"number\" id=\"amount\" name=\"amount\" placeholder = \"\uC22B\uC790\uB9CC \uC785\uB825\uD574\uC8FC\uC138\uC694\"><br>\n        \n                            <div class = \"board__btn-wrap\">\n                                <button class = \"board__caculate-btn\">\uACC4\uC0B0\uD558\uAE30</button><br>\n                            </div>\n                        </div>\n                        <label for=\"result\">\uC608\uC0C1 \uACAC\uC801 \uAE08\uC561\uC740 : </label>\n                        <input type=\"text\" id=\"result\" name=\"result\" disabled>\n                    </div>\n                    <div class=\"board__deadline\">\n                        <h1> \uC5B8\uC81C\uAE4C\uC9C0 \uD544\uC694\uD55C\uC9C0 \uC54C\uB824\uC8FC\uC138\uC694 </h1>\n                        <label for=\"deadline\">\uB0A0\uC9DC \uC785\uB825\uD558\uAE30 : </label>\n                        <input type=\"date\" id=\"deadline\" name=\"deadline\"><br>\n                    </div>\n                    <div class=\"board__btn-flex\">\n                        <div class=\"board__btn-wrap\">\n                            <a href=\"/design\" data-link id = \"next-btn\"> \uC774\uC804 \uD398\uC774\uC9C0 </a>\n                        </div>\n                        <div>\n                            <p>\n                                <a href=\"/board\" data-link class=\"reset-btn\"> \uB2E4\uC2DC \uC785\uB825\uD558\uAE30 </a>\n                            </p>\n                        </div>\n                        <div class=\"board__btn-wrap\">\n                            <a href=\"/submit\" data-link id = \"next-btn\"> \uB2E4\uC74C \uD398\uC774\uC9C0 </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        ");
            case 1:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      function getHTML() {
        return _getHTML.apply(this, arguments);
      }
      return getHTML;
    }()
  }, {
    key: "executeScript",
    value: function executeScript() {
      console.log("Hello This is Board Page");
      // 평 수 계산기
      var pyeongChange = document.getElementById("autoInput");
      var resultElement = document.querySelector(".board__calculator-unit-result");
      pyeongChange.addEventListener("input", function () {
        var pyeongValue = parseFloat(pyeongChange.value);
        if (isNaN(pyeongValue)) {
          resultElement.textContent = "숫자를 입력하세요.";
        } else {
          var pyeongResult = (pyeongValue * 3.3058).toFixed(2) + "제곱미터 입니다.";
          resultElement.textContent = pyeongResult;
        }
      });
      // 예상견적
      var calculateBtn = document.querySelector(".board__caculate-btn");
      calculateBtn.addEventListener("click", calculate);
      function calculate() {
        var scale = document.getElementById("scale").value;
        var amount = document.getElementById("amount").value;
        var length = document.getElementById("length").value;
        var width = document.getElementById("width").value;
        console.log(amount);
        var area = 0; // declare area outside of the if block

        if (scale === "") {
          area = length * width * amount / 33.0579;
          localStorage.setItem("length", length);
          localStorage.setItem("width", width);
          localStorage.setItem("amount", amount);
        } else if (width === "" || length === "") {
          area = scale * amount / 33.0579;
          localStorage.setItem("scale", scale);
          localStorage.setItem("amount", amount);
        }
        var cost = Math.round(area * 50000 / 1000) * 1000;
        var formattedCost = cost.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        var resultElement = document.getElementById("result");
        resultElement.value = formattedCost + " 원 입니다.";
        console.log(resultElement.value);
        localStorage.setItem("result", resultElement.value);
      }

      //납품날짜 오늘 이전 날짜 선택 제한
      // Get the date input element
      var deadlineInput = document.getElementById("deadline");

      // Get the current date and set it as the minimum date for the input element
      var today = new Date().toISOString().split("T")[0];
      deadlineInput.setAttribute("min", today);

      //납품날짜  값 전달
      var deadline = document.getElementById("deadline");
      deadline.addEventListener("input", function () {
        var deadlineValue = deadline.value;
        localStorage.setItem("deadline", deadlineValue);
      });
    }
  }]);
  return _default;
}(_layout2["default"]);
exports["default"] = _default;